---

# Flattened configuration (the officiial repo uses a non recommended configuration : hash_behaviour=merge.)
confluent_roles: []
confluent_latest: no
confluent_oss: no
confluent_version: 4.1.2-1

kafka_broker_id: null
kafka_broker_rack: null
broker_config_port: 9092
registry_config_port: 8081
security_mode: plaintext

hosts_kafka_brokers: null
hosts_schema_registries: null
hosts_zookeepers: null

systemd_services_root_path: /lib/systemd/system/

confluent_control_center_config_confluent_controlcenter_data_dir: /var/lib/confluent/control-center
confluent_control_center_config_confluent_controlcenter_streams_num_stream_threads: 8
confluent_control_center_config_file: /etc/confluent-control-center/control-center-production.properties
confluent_control_center_group: confluent
confluent_control_center_service_name: confluent-control-center
confluent_control_center_service_file: "{{ systemd_services_root_path }}{{ confluent_control_center_service_name }}.service"
confluent_control_center_systemd_enabled: yes
confluent_control_center_systemd_state: started
confluent_control_center_user: cp-control-center
confluent_control_center_environment: []

kafka_broker_config_enterprise_confluent_metrics_reporter_bootstrap_servers: "{{ inventory_hostname }}:9092"
kafka_broker_config_enterprise_metric_reporters: io.confluent.metrics.reporter.ConfluentMetricsReporter
kafka_broker_config_file: /etc/kafka/server.properties
kafka_broker_config_auto_create_topics_enable: yes
kafka_broker_config_delete_topics_enable: yes
kafka_broker_config_group_initial_rebalance_delay_ms: 0
kafka_broker_config_log_retention_check_interval_ms: 300000
kafka_broker_config_log_retention_hours: 168
kafka_broker_config_log_segment_bytes: 1073741824
kafka_broker_config_metrics_enabled: false
kafka_broker_config_num_io_threads: 16
kafka_broker_config_num_network_threads: 8
kafka_broker_config_num_partitions: 1
kafka_broker_config_num_recovery_threads_per_data_dir: "{{ ansible_processor_vcpus }}"
kafka_broker_config_num_replica_fetchers: 2

kafka_broker_config_offsets_topic_replication_factor: 3
kafka_broker_config_socket_receive_buffer_bytes: 102400
kafka_broker_config_socket_request_max_bytes: 104857600
kafka_broker_config_socket_send_buffer_bytes: 102400
kafka_broker_config_transaction_state_log_min_isr: 2
kafka_broker_config_transaction_state_log_replication_factor: 3
kafka_broker_config_zookeeper_connection_timeout_ms: 6000
kafka_broker_config_additionals: {}
kafka_broker_datadir:
  - /var/lib/kafka/data
kafka_broker_group: confluent
kafka_broker_service_name: confluent-kafka
kafka_broker_service_file: "{{ systemd_services_root_path }}{{ kafka_broker_service_name }}.service"
kafka_broker_systemd_enabled: yes
kafka_broker_systemd_state: started
kafka_broker_user: cp-kafka
kafka_broker_zookeeper_chroot_path: null
kafka_broker_environment: {}
kafka_broker_custom_service: {}
kafka_broker_log4j_config_file: /etc/kafka/log4j.properties
kafka_broker_kafka_admin_env_sh_file: /etc/profile.d/kafka-admin-env.sh
kafka_broker_log4j_max_file_size: 100MB
kafka_broker_log4j_max_number: 3

kafka_connect_distributed_config_config_storage_replication_factor: 3
kafka_connect_distributed_config_config_storage_topic: connect-configs
kafka_connect_distributed_config_consumer_interceptor_classes: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
kafka_connect_distributed_config_file: /etc/kafka/connect-distributed.properties
kafka_connect_distributed_config_group_id: connect-cluster
kafka_connect_distributed_config_internal_key_converter: org.apache.kafka.connect.json.JsonConverter
kafka_connect_distributed_config_internal_key_converter_schemas_enable: no
kafka_connect_distributed_config_internal_value_converter: org.apache.kafka.connect.json.JsonConverter
kafka_connect_distributed_config_internal_value_converter_schemas_enable: no
kafka_connect_distributed_config_key_converter: io.confluent.connect.avro.AvroConverter
kafka_connect_distributed_config_offset_flush_interval_ms: 10000
kafka_connect_distributed_config_offset_storage_replication_factor: 3
kafka_connect_distributed_config_offset_storage_topic: connect-offsets
kafka_connect_distributed_config_plugin_path: /usr/share/java
kafka_connect_distributed_config_producer_interceptor_classes: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
kafka_connect_distributed_config_status_storage_replication_factor: 3
kafka_connect_distributed_config_status_storage_topic: connect-status
kafka_connect_distributed_config_value_converter: io.confluent.connect.avro.AvroConverter
kafka_connect_distributed_group: confluent
kafka_connect_distributed_service_name: confluent-kafka-connect
kafka_connect_distributed_service_file: "{{ systemd_services_root_path }}{{ kafka_connect_distributed_service_name }}.service"
kafka_connect_distributed_systemd_enabled: yes
kafka_connect_distributed_systemd_state: started
kafka_connect_distributed_user: cp-kafka-connect
kafka_connect_distributed_environment: {}

kafka_mirror_maker_config_num_streams: 2
kafka_mirror_maker_group: confluent
kafka_mirror_maker_log_dir: /var/log/mirror-maker
kafka_mirror_maker_producer_filename: /etc/kafka/mirror-maker.target.producer.properties
kafka_mirror_maker_service_name: confluent-mirror-maker
kafka_mirror_maker_service_file: "{{ systemd_services_root_path }}{{ kafka_mirror_maker_service_name }}.service"
kafka_mirror_maker_systemd_enabled: yes
kafka_mirror_maker_systemd_state: started
kafka_mirror_maker_topics_whitelist: .
kafka_mirror_maker_user: cp-kafka

kafka_tools_config_client_id: tester
kafka_tools_config_file: /etc/kafka/kafka-tools.properties
kafka_tools_group: confluent
kafka_tools_user: cp-kafka

kafkarest_config_file: /etc/kafka-rest/kafka-rest.properties
kafkarest_config_listeners: http://0.0.0.0:8082
kafkarest_environment:
  LOG_DIR: /var/log/kafka-rest

kafkarest_group: confluent
kafkarest_service_name: confluent-kafka-rest
kafkarest_service_file: "{{ systemd_services_root_path }}{{ kafkarest_service_name }}.service"
kafkarest_systemd_enabled: yes
kafkarest_systemd_state: started
kafkarest_user: cp-kafka-rest

ksql_config_application_id: ksql-server
ksql_config_file: /etc/ksql/ksql-server.properties
ksql_config_listeners: http://localhost:8088
ksql_group: confluent
ksql_service_name: confluent-ksql
ksql_service_file: "{{ systemd_services_root_path }}{{ ksql_service_name }}.service"
ksql_systemd_enabled: yes
ksql_systemd_state: started
ksql_user: cp-ksql
ksql_environment: {}

schema_registry_config_debug: no
schema_registry_config_file: /etc/schema-registry/schema-registry.properties
schema_registry_config_kafkastore_topic: _schemas
schema_registry_config_listeners: http://0.0.0.0:{{ registry.config.port }}
schema_registry_environment:
  SCHEMA_REGISTRY_HEAP_OPTS: -Xmx1000M
schema_registry_group: confluent
schema_registry_service_name: confluent-schema-registry
schema_registry_service_file: "{{ systemd_services_root_path }}{{ schema_registry_service_name }}.service"
schema_registry_systemd_enabled: yes
schema_registry_systemd_state: started
schema_registry_user: cp-schema-registry

zookeeper_config_autopurge_purgeInterval: 1
zookeeper_config_autopurge_snapRetainCount: 10
zookeeper_config_clientPort: 2181
zookeeper_config_dataDir: /var/lib/zookeeper
zookeeper_config_dataLogDir: /var/lib/zookeeper/log
zookeeper_config_file: /etc/kafka/zookeeper.properties
zookeeper_config_initLimit: 5
zookeeper_config_maxClientCnxns: 0
zookeeper_config_syncLimit: 2
zookeeper_electionPort: 3888
zookeeper_environment:
  KAFKA_HEAP_OPTS: -Xmx1000M

zookeeper_group: confluent
zookeeper_serverPort: 2888
zookeeper_service_name: confluent-zookeeper
zookeeper_service_file: "{{ systemd_services_root_path }}{{ zookeeper_service_name }}.service"
zookeeper_systemd_enabled: yes
zookeeper_systemd_state: started
zookeeper_user: cp-kafka


# Aggregated configs (To keep compatibility with templates that loops on config parts)
kafkarest:
  config:
    listeners: "{{ kafkarest_config_listeners }}"

ksql:
  config:
    application.id: "{{ ksql_config_application_id }}"
    listeners: "{{ ksql_config_listeners }}"

schema:
  registry:
    config:
      listeners: "{{ schema_registry_config_listeners }}"
      kafkastore.topic: "{{ schema_registry_config_kafkastore_topic }}"
      debug: "{{ schema_registry_config_debug }}"

zookeeper:
  config:
    clientPort: "{{ zookeeper_config_clientPort }}"
    maxClientCnxns: "{{ zookeeper_config_maxClientCnxns }}"
    initLimit: "{{ zookeeper_config_initLimit }}"
    syncLimit: "{{ zookeeper_config_syncLimit }}"
    autopurge.snapRetainCount: "{{ zookeeper_config_autopurge_snapRetainCount }}"
    autopurge.purgeInterval: "{{ zookeeper_config_autopurge_purgeInterval }}"
    dataDir: "{{ zookeeper_config_dataDir }}"
    dataLogDir: "{{ zookeeper_config_dataLogDir }}"

confluent:
  control:
    center:
      config:
        confluent.controlcenter.streams.num.stream.threads: "{{ confluent_control_center_config_confluent_controlcenter_streams_num_stream_threads }}"
        confluent.controlcenter.data.dir: "{{ confluent_control_center_config_confluent_controlcenter_data_dir }}"

kafka:
  connect:
    distributed:
      config:
        consumer.interceptor.classes: "{{ kafka_connect_distributed_config_consumer_interceptor_classes }}"
        producer.interceptor.classes: "{{ kafka_connect_distributed_config_producer_interceptor_classes }}"
        config.storage.replication.factor: "{{ kafka_connect_distributed_config_config_storage_replication_factor }}"
        config.storage.topic: "{{ kafka_connect_distributed_config_config_storage_topic }}"
        group.id: "{{ kafka_connect_distributed_config_group_id }}"
        internal.key.converter: "{{ kafka_connect_distributed_config_internal_key_converter }}"
        internal.key.converter.schemas.enable: "{{ kafka_connect_distributed_config_internal_key_converter_schemas_enable }}"
        internal.value.converter: "{{ kafka_connect_distributed_config_internal_value_converter }}"
        internal.value.converter.schemas.enable: "{{ kafka_connect_distributed_config_internal_value_converter_schemas_enable }}"
        offset.flush.interval.ms: "{{ kafka_connect_distributed_config_offset_flush_interval_ms }}"
        offset.storage.replication.factor: "{{ kafka_connect_distributed_config_offset_storage_replication_factor }}"
        offset.storage.topic: "{{ kafka_connect_distributed_config_offset_storage_topic }}"
        status.storage.replication.factor: "{{ kafka_connect_distributed_config_status_storage_replication_factor }}"
        status.storage.topic: "{{ kafka_connect_distributed_config_status_storage_topic }}"
        key.converter: "{{ kafka_connect_distributed_config_key_converter }}"
        value.converter: "{{ kafka_connect_distributed_config_value_converter }}"
        plugin.path: "{{ kafka_connect_distributed_config_plugin_path }}"
  tools:
    config:
      client.id: "{{ kafka_tools_config_client_id }}"
  broker:
    config:
      auto.create.topics.enable: "{{ kafka_broker_config_auto_create_topics_enable }}"
      delete.topic.enable: "{{ kafka_broker_config_delete_topics_enable }}"
      group.initial.rebalance.delay.ms: "{{ kafka_broker_config_group_initial_rebalance_delay_ms }}"
      log.retention.check.interval.ms: "{{ kafka_broker_config_log_retention_check_interval_ms }}"
      log.retention.hours: "{{ kafka_broker_config_log_retention_hours }}"
      log.segment.bytes: "{{ kafka_broker_config_log_segment_bytes }}"
      num.io.threads: "{{ kafka_broker_config_num_io_threads }}"
      num.network.threads: "{{ kafka_broker_config_num_network_threads }}"
      num.partitions: "{{ kafka_broker_config_num_partitions }}"
      num.recovery.threads.per.data.dir: "{{ kafka_broker_config_num_recovery_threads_per_data_dir }}"
      num.replica.fetchers: "{{ kafka_broker_config_num_replica_fetchers }}"
      offsets.topic.replication.factor: "{{ kafka_broker_config_offsets_topic_replication_factor }}"
      socket.receive.buffer.bytes: "{{ kafka_broker_config_socket_receive_buffer_bytes }}"
      socket.request.max.bytes: "{{ kafka_broker_config_socket_request_max_bytes }}"
      socket.send.buffer.bytes: "{{ kafka_broker_config_socket_send_buffer_bytes }}"
      transaction.state.log.min.isr: "{{ kafka_broker_config_transaction_state_log_min_isr }}"
      transaction.state.log.replication.factor: "{{ kafka_broker_config_transaction_state_log_replication_factor }}"
      zookeeper.connection.timeout.ms: "{{ kafka_broker_config_zookeeper_connection_timeout_ms }}"
      confluent.support.metrics.enable: "{{ kafka_broker_config_metrics_enabled }}"
    config_enterprise:
      metric.reporters: "{{ kafka_broker_config_enterprise_metric_reporters }}"
      confluent.metrics.reporter.bootstrap.servers: "{{ kafka_broker_config_enterprise_confluent_metrics_reporter_bootstrap_servers }}"
  mirror:
    maker:
      config:
        num_streams: "{{ kafka_mirror_maker_config_num_streams }}"
